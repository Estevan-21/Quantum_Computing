from DinamycAndProbabilisticSystems import DinamycAndProbabilisticSystems as d
import unittest

""" Realiza la simulación del estado final de un sistema probabilístico después de t clicks. """
matriz1 = [ [0,0,0,0,0,0,0,0,0,0,0,0,1],
            [0,0,0,0,0,0,0,0,0,0,1,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,1,0],
            [0,0,1,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,1,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,1,0,0,0,0,0,0],
            [0,0,0,0,0,1,0,0,0,1,0,0,0],
            [0,0,0,0,1,0,0,0,0,0,0,0,0],
            [0,1,0,0,0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
          ]
vector1 = [10,4,1,7,2,2,11,0,3,1,0,5,2]
res = d.systemAndDinamycsReal(matriz1, vector1,25)


""" TEST GRAFICAS """
v = [[1/4,0],[1/6,0],[1/3,0],[1/6,0],[1/6,0]]
d.Graphs2(v)

""" MULTIPLES RENDIJAS CLASICO"""
Matrix1 = [[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]
            ,[(1/(2),0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]
            ,[(1/(2),0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]
            ,[(0,0),(1/3,0),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0)]
            ,[(0,0),(1/3,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0)]
            ,[(0,0),(1/3,0),(1/3,0),(0,0),(0,0),(1,0),(0,0),(0,0)]
            ,[(0,0),(0,0),(1/3,0),(0,0),(0,0),(0,0),(1,0),(0,0)]
             ,[(0,0),(0,0),(1/3,0),(0,0),(0,0),(0,0),(0,0),(1,0)]]
Vector1 = [(1,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]
res1 = d.classicMultipleSlits(Matrix1,Vector1,1)
d.Graphs(res1)

""" MULTIPLES RENDIJAS CUANTICO"""
Matrix2 = [[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
    , [(1 / (2 ** (1 / 2)), 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
    , [(1 / (2 ** (1 / 2)), 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
    , [(0, 0), (-1 / (6 ** (1 / 2)), 1 / (6 ** (1 / 2))), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
    , [(0, 0), (-1 / (6 ** (1 / 2)), -1 / (6 ** (1 / 2))), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)]
    , [(0, 0), (1 / (6 ** (1 / 2)), -1 / (6 ** (1 / 2))), (-1 / (6 ** (1 / 2)), 1 / (6 ** (1 / 2))), (0, 0), (0, 0),
       (1, 0), (0, 0), (0, 0)]
    , [(0, 0), (0, 0), (-1 / (6 ** (1 / 2)), -1 / (6 ** (1 / 2))), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)]
    , [(0, 0), (0, 0), (1 / (6 ** (1 / 2)), -1 / (6 ** (1 / 2))), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]]
Vector2 = [(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
res2 = d.quantumMultipleSlits(Matrix2, Vector2, 1)
d.Graphs(res2)




